application.productive = true
application.testmessages = true
akka.loglevel="DEBUG"
foo.akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]  
    loglevel="DEBUG"
}

rabbit {
	akka {
      actor {
        provider = "akka.remote.RemoteActorRefProvider"
      } 
      remote {
        transport = "akka.remote.netty.NettyRemoteTransport"
        netty {
          hostname = "127.0.0.1"
          port = 2551
        }
      }
    }	
    queue{
    	gui.test = "miner_cas_rtc_to_gui_test"
    	gui.prod = "miner_cas_rtc_to_gui"
    	rtc.test = "miner_cas_gui_to_rtc_test"
    	rtc.prod = "miner_cas_gui_to_rtc"
    }
    server {
        hostname = "127.0.0.1"
        port = 5672
        user = "guest"
    	password = "guest"
        virtual-host = "/"
        connection-timeout = 1000ms
        delivery-timeout = 1000ms
     }    
    not.server {
        hostname = "win-devel.informatik.haw-hamburg.de"
        port = 5672
        user = "admin"
    	password = "IlmSG400"
        virtual-host = "/"
        connection-timeout = 1000ms
        delivery-timeout = 1000ms
     }
}

needs {
	akka {
      actor {
        provider = "akka.remote.RemoteActorRefProvider"
      } 
      remote {
        transport = "akka.remote.netty.NettyRemoteTransport"
        netty {
          hostname = "127.0.0.1"
          port = 2552
        }
      }
    }	
}

# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="Lr=FrOCvT_cO]JQyiDsT`B@TGJ^y@[@e7eWoshji7KI=oSHeD5lOSp_[md_IUbVa"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG



